import aiofiles
import ffmpeg
import asyncio
import os
import shutil
import psutil
import subprocess
import requests
import aiohttp
import yt_dlp
import aiohttp
import random

from os import path
from typing import Union
from asyncio import QueueEmpty
from PIL import Image, ImageFont, ImageDraw, ImageFilter
from PIL import ImageGrab
from typing import Callable

from pytgcalls import StreamType
from pytgcalls.types.input_stream import InputStream
from pytgcalls.types.input_stream import InputAudioStream

from youtube_search import YoutubeSearch

from pyrogram import Client, filters
from pyrogram.types import (
    Message,
    Voice,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)
from pyrogram.errors import UserAlreadyParticipant, UserNotParticipant
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from pyrogram.errors import ChatAdminRequired, UserNotParticipant, ChatWriteForbidden


from Codexun.tgcalls import calls, queues
from Codexun.tgcalls.youtube import download
from Codexun.tgcalls import convert as cconvert
from Codexun.tgcalls.calls import client as ASS_ACC
from Codexun.database.queue import (
    get_active_chats,
    is_active_chat,
    add_active_chat,
    remove_active_chat,
    music_on,
    is_music_playing,
    music_off,
)

from Codexun import BOT_NAME, BOT_USERNAME
from Codexun import app
import Codexun.tgcalls
from Codexun.tgcalls import youtube
from Codexun.config import (
    DURATION_LIMIT,
    que,
    SUDO_USERS,
    BOT_ID,
    ASSNAME,
    ASSUSERNAME,
    ASSID,
    START_IMG,
    SUPPORT,
    UPDATE,
    BOT_NAME,
    BOT_USERNAME,
)
from Codexun.utils.filters import command
from Codexun.utils.decorators import errors, sudo_users_only
from Codexun.utils.administrator import adminsOnly
from Codexun.utils.errors import DurationLimitError
from Codexun.utils.gets import get_url, get_file_name
from Codexun.modules.admins import member_permissions


def others_markup(videoid, user_id):
    buttons = [
        [
            InlineKeyboardButton(text="‚ñ∑", callback_data=f"resumevc"),
            InlineKeyboardButton(text="II", callback_data=f"pausevc"),
            InlineKeyboardButton(text="‚Ä£‚Ä£I", callback_data=f"skipvc"),
            InlineKeyboardButton(text="‚ñ¢", callback_data=f"stopvc"),
        ],[
            InlineKeyboardButton(text="‚ú∞ ·¥ç·¥Ä…¥·¥Ä…¢·¥á ‚ú∞", callback_data=f"cls"),
        ],
        
    ]
    return buttons


fifth_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("‚ûã0", callback_data="first"),
            InlineKeyboardButton("‚ù∫0%", callback_data="second"),
            
        ],[
            
            InlineKeyboardButton("‚ûì0%", callback_data="third"),
            InlineKeyboardButton("‚ûä‚ù∫0%", callback_data="fourth"),
            
        ],[
            
            InlineKeyboardButton("‚ûã00% ‚ô°", callback_data="fifth"),
            
        ],[
            InlineKeyboardButton(text="‚óÅ …¢·¥è  ô·¥Ä·¥Ñ·¥ã ‚ñ∑", callback_data=f"cbmenu"),
        ],
    ]
)

fourth_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("20%", callback_data="first"),
            InlineKeyboardButton("50%", callback_data="second"),
            
        ],[
            
            InlineKeyboardButton("100%", callback_data="third"),
            InlineKeyboardButton("150% ‚ô°", callback_data="fourth"),
            
        ],[
            
            InlineKeyboardButton("200%", callback_data="fifth"),
            
        ],[
            InlineKeyboardButton(text="‚óÅ …¢·¥è  ô·¥Ä·¥Ñ·¥ã ‚ñ∑", callback_data=f"cbmenu"),
        ],
    ]
)

third_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("20%", callback_data="first"),
            InlineKeyboardButton("50%", callback_data="second"),
            
        ],[
            
            InlineKeyboardButton("100% ‚ô°", callback_data="third"),
            InlineKeyboardButton("150%", callback_data="fourth"),
            
        ],[
            
            InlineKeyboardButton("200%", callback_data="fifth"),
            
        ],[
            InlineKeyboardButton(text="‚óÅ …¢·¥è  ô·¥Ä·¥Ñ·¥ã ‚ñ∑", callback_data=f"cbmenu"),
        ],
    ]
)

second_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("20%", callback_data="first"),
            InlineKeyboardButton("50% ‚ô°", callback_data="second"),
            
        ],[
            
            InlineKeyboardButton("100%", callback_data="third"),
            InlineKeyboardButton("150%", callback_data="fourth"),
            
        ],[
            
            InlineKeyboardButton("200%", callback_data="fifth"),
            
        ],[
            InlineKeyboardButton(text="‚óÅ …¢·¥è  ô·¥Ä·¥Ñ·¥ã ‚ñ∑", callback_data=f"cbmenu"),
        ],
    ]
)

first_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("20% ‚ô°", callback_data="first"),
            InlineKeyboardButton("50%", callback_data="second"),
            
        ],[
            
            InlineKeyboardButton("100%", callback_data="third"),
            InlineKeyboardButton("150%", callback_data="fourth"),
            
        ],[
            
            InlineKeyboardButton("200%", callback_data="fifth"),
            
        ],[
            InlineKeyboardButton(text="‚óÅ …¢·¥è  ô·¥Ä·¥Ñ·¥ã ‚ñ∑", callback_data=f"cbmenu"),
        ],
    ]
)
highquality_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton(" ü·¥è·¥° Q·¥ú·¥Ä ü…™·¥õ è", callback_data="low"),],
         [   InlineKeyboardButton("·¥ç·¥á·¥Ö…™·¥ú·¥ç Q·¥ú·¥Ä ü…™·¥õ è", callback_data="medium"),
            
        ],[   InlineKeyboardButton(" ú…™…¢ ú Q·¥ú·¥Ä ü…™·¥õ è", callback_data="high"),
            
        ],[
            InlineKeyboardButton(text="‚óÅ  ô·¥Ä·¥Ñ·¥ã", callback_data=f"cbmenu"),
            InlineKeyboardButton(text="·¥Ñ ü·¥èÍú±·¥á ‚ò™", callback_data=f"cls"),
        ],
    ]
)
lowquality_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton(" ü·¥è·¥° Q·¥ú·¥Ä ü…™·¥õ è ‚óâ", callback_data="low"),],
         [   InlineKeyboardButton("·¥ç·¥á·¥Ö…™·¥ú·¥ç Q·¥ú·¥Ä ü…™·¥õ è", callback_data="medium"),
            
        ],[   InlineKeyboardButton(" ú…™…¢ ú Q·¥ú·¥Ä ü…™·¥õ è", callback_data="high"),
            
        ],[
            InlineKeyboardButton(text="‚óÅ  ô·¥Ä·¥Ñ·¥ã", callback_data=f"cbmenu"),
            InlineKeyboardButton(text="·¥Ñ ü·¥èÍú±·¥á ‚ò™", callback_data=f"cls"),
        ],
    ]
)
mediumquality_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton(" ü·¥è·¥° Q·¥ú·¥Ä ü…™·¥õ è", callback_data="low"),],
         [   InlineKeyboardButton("·¥ç·¥á·¥Ö…™·¥ú·¥ç Q·¥ú·¥Ä ü…™·¥õ è ‚óâ", callback_data="medium"),
            
        ],[   InlineKeyboardButton(" ú…™…¢ ú Q·¥ú·¥Ä ü…™·¥õ è", callback_data="high"),
            
        ],[
            InlineKeyboardButton(text="‚óÅ  ô·¥Ä·¥Ñ·¥ã", callback_data=f"cbmenu"),
            InlineKeyboardButton(text="·¥Ñ ü·¥èÍú±·¥á ‚ò™", callback_data=f"cls"),
        ],
    ]
)

dbclean_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton(" è·¥áÍú±, ·¥ò Ä·¥è·¥Ñ·¥á·¥á·¥Ö !", callback_data="cleandb"),],
        [    InlineKeyboardButton("…¥·¥è·¥ò·¥á, ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü !", callback_data="cbmenu"),
            
        ],[
            InlineKeyboardButton(text="‚óÅ …¢·¥è  ô·¥Ä·¥Ñ·¥ã ‚ñ∑", callback_data=f"cbmenu"),
        ],
    ]
)
menu_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("‚ñ∑", callback_data="resumevc"),
            InlineKeyboardButton("II", callback_data="pausevc"),
            InlineKeyboardButton("‚Ä£‚Ä£I", callback_data="skipvc"),
            InlineKeyboardButton("‚ñ¢", callback_data="stopvc"),
            
        ],[
            InlineKeyboardButton(text="üçë ·¥†·¥è ü·¥ú·¥ç·¥á", callback_data=f"fifth"),
             InlineKeyboardButton(text="Q·¥ú·¥Ä ü…™·¥õ è üçë", callback_data=f"high"),
        ],[
            InlineKeyboardButton(text="üçπ ·¥Ñ ü·¥á·¥Ä…¥ ·¥Ö ô", callback_data=f"dbconfirm"),
             InlineKeyboardButton(text="·¥Ä ô·¥è·¥ú·¥õ üçπ", callback_data=f"nonabout"),
        ],[
             InlineKeyboardButton(text="üçë ·¥Ñ ü·¥èÍú±·¥á ·¥ç·¥á…¥·¥ú üçë", callback_data=f"cls"),
        ],
    ]
)


@Client.on_callback_query(filters.regex("skipvc"))
async def skipvc(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            """
·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥á ·¥†·¥è…™·¥Ñ·¥á·¥á ·¥Ñ ú·¥Ä·¥õ ·¥ò·¥á Ä·¥ç…™Íú±Íú±…™·¥è…¥ ·¥Ñ·¥Ä…¥ ·¥Ö·¥è ·¥õ ú…™Íú±.
""",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    chat_title = CallbackQuery.message.chat.title
    if await is_active_chat(chat_id):
            user_id = CallbackQuery.from_user.id
            await remove_active_chat(chat_id)
            user_name = CallbackQuery.from_user.first_name
            rpk = "[" + user_name + "](tg://user?id=" + str(user_id) + ")"
            await CallbackQuery.answer()
            await CallbackQuery.message.reply(
                f"""
**Íú±·¥ã…™·¥ò  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥úÍú±·¥á·¥Ö  ô è** {rpk}
‚Ä¢ …¥·¥è ·¥ç·¥è Ä·¥á Íú±·¥è…¥…¢Íú± …™…¥ Q·¥ú·¥á·¥ú·¥á
` ü·¥á·¥Ä·¥†…™…¥…¢ ·¥†·¥Ñ  ô è·¥á  ô è·¥á..`
"""
            )
            await calls.pytgcalls.leave_group_call(chat_id)
            return
            await CallbackQuery.answer("·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ Íú±·¥ã…™·¥ò.!", show_alert=True)     

@Client.on_callback_query(filters.regex("pausevc"))
async def pausevc(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†·¥Ñ  Ä…™…¢ ú·¥õÍú± ·¥Ñ·¥Ä…¥ ·¥Ö·¥è ·¥õ ú…™Íú±.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
        if await is_music_playing(chat_id):
            await music_off(chat_id)
            await calls.pytgcalls.pause_stream(chat_id)
            await CallbackQuery.answer("·¥ç·¥úÍú±…™·¥Ñ ·¥ò·¥Ä·¥úÍú±·¥á·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è.", show_alert=True)
            
        else:
            await CallbackQuery.answer(f"…¥·¥è·¥õ ú…™…¥…¢ …™Íú± ·¥ò ü·¥Ä è…™…¥…¢ ·¥è…¥ ·¥†·¥Ñ  ô·¥Ä ô è!", show_alert=True)
            return
    else:
        await CallbackQuery.answer(f"…¥·¥è·¥õ ú…™…¥…¢ …™Íú± ·¥ò ü·¥Ä è…™…¥…¢ ·¥è…¥ ·¥†·¥Ñ  ô·¥Ä ô è!", show_alert=True)


@Client.on_callback_query(filters.regex("resumevc"))
async def resumevc(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            """
·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†·¥Ñ  Ä…™…¢ ú·¥õ ·¥Ñ·¥Ä…¥ ·¥Ö·¥è ·¥õ ú…™Íú±.
""",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
        if await is_music_playing(chat_id):
            await CallbackQuery.answer(
                "Nothing is paused in the voice chat.",
                show_alert=True,
            )
            return
        else:
            await music_on(chat_id)
            await calls.pytgcalls.resume_stream(chat_id)
            await CallbackQuery.answer("·¥ç·¥úÍú±…™·¥Ñ  Ä·¥áÍú±·¥ú·¥ç·¥á·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è.", show_alert=True)
            
    else:
        await CallbackQuery.answer(f"…¥·¥è·¥õ ú…™…¥…¢ …™Íú± ·¥ò ü·¥Ä è…™…¥…¢.", show_alert=True)


@Client.on_callback_query(filters.regex("stopvc"))
async def stopvc(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†·¥Ñ  Ä…™…¢ ú·¥õ ·¥Ñ·¥Ä…¥ ·¥Ö·¥è ·¥õ ú…™Íú±.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
        
        try:
            await calls.pytgcalls.leave_group_call(chat_id)
        except Exception:
            pass
        await remove_active_chat(chat_id)
        await CallbackQuery.answer("·¥ç·¥úÍú±…™·¥Ñ Íú±·¥õ Ä·¥á·¥Ä·¥ç ·¥á…¥·¥Ö·¥á·¥Ö.", show_alert=True)
        user_id = CallbackQuery.from_user.id
        user_name = CallbackQuery.from_user.first_name
        rpk = "[" + user_name + "](tg://user?id=" + str(user_id) + ")"
        await CallbackQuery.message.reply(f"**‚Ä¢ ·¥ç·¥úÍú±…™·¥Ñ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è Íú±·¥õ·¥è·¥ò·¥á·¥Ö  ô è {rpk}.**")
    else:
        await CallbackQuery.answer(f"…¥·¥è·¥õ ú…™…¥…¢ …™Íú±Íú± ·¥ò ü·¥Ä è…™…¥…¢ ·¥è…¥ ·¥†·¥Ñ.", show_alert=True)

@Client.on_callback_query(filters.regex("cleandb"))
async def cleandb(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥á ·¥†·¥Ñ  Ä…™…¢ ú·¥õ ·¥Ñ·¥Ä·¥Ä…¥ ·¥Ö·¥è ·¥õ ú…™Íú±.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
        
        try:
            await calls.pytgcalls.leave_group_call(chat_id)
        except Exception:
            pass
        await remove_active_chat(chat_id)
        await CallbackQuery.answer("·¥Ö ô ·¥Ñ ü·¥á·¥Ä…¥·¥á·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è!", show_alert=True)
        user_id = CallbackQuery.from_user.id
        user_name = CallbackQuery.from_user.first_name
        rpk = "[" + user_name + "](tg://user?id=" + str(user_id) + ")"
        await CallbackQuery.edit_message_text(
        f"‚úÖ __Erased queues successfully__\n‚îÇ\n‚ï∞ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥ÄÍú±·¥á ·¥Ñ ü·¥á·¥Ä…¥·¥á·¥Ö  ô è {rpk}",
        reply_markup=InlineKeyboardMarkup(
            [
            [InlineKeyboardButton("üçë ·¥Ñ ü·¥èÍú±·¥á üçë", callback_data="cls")]])
        
    )
    else:
        await CallbackQuery.answer(f"…¥·¥è·¥õ ú…™…¥…¢ …™Íú± ·¥ò ü·¥Ä è…™…¥…¢ ·¥è…¥ ·¥†·¥Ñ  ô·¥Ä ô è.", show_alert=True)


@Client.on_callback_query(filters.regex("cbcmnds"))
async def cbcmnds(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**{BOT_NAME} ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± üçí**

‚Ä¢ /play (song name) 
- Íú∞·¥è Ä ·¥ò ü·¥Ä è…™…¥…¢ ·¥ç·¥úÍú±…™·¥Ñ

‚Ä¢ /pause 
- Íú∞·¥è Ä ·¥ò·¥Ä·¥úÍú±…™…¥…¢ ·¥ç·¥úÍú±…™·¥Ñ

‚Ä¢ /resume 
- Íú∞·¥è Ä Ä  Ä·¥áÍú±·¥ú·¥ç…™…¥…¢ ·¥ç·¥úÍú±…™·¥Ñ

‚Ä¢ /skip 
- Íú∞·¥è Ä Ä Íú±·¥ã…™·¥ò·¥ò…™…¥…¢ ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ Íú±·¥è…¥…¢

‚Ä¢ /search (song name) 
- Íú∞·¥è Ä Íú±·¥á·¥Ä Ä·¥Ñ ú…™…¥…¢ ·¥ç·¥úÍú±…™·¥Ñ

‚Ä¢ /song 
- Íú∞·¥è Ä ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥ç·¥úÍú±…™·¥Ñ

·¥ò·¥è·¥°·¥á Ä·¥á  ô è **@{UPDATE}** !""",
        reply_markup=InlineKeyboardMarkup(
            [
              [
                    InlineKeyboardButton(
                        "üçí ·¥ç·¥á…¥·¥ú", callback_data="cbstgs"),
                    InlineKeyboardButton(
                        "Íú±·¥ú·¥Ö·¥è üçí", callback_data="cbowncmnds")
                ],
              [InlineKeyboardButton("üçë  ô·¥Ä·¥Ñ·¥ã  ú·¥è·¥ç·¥á üçë", callback_data="cbhome")]]
        ),
    )
@Client.on_callback_query(filters.regex("cbowncmnds"))
async def cbowncmnds(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**üçí Íú±·¥ú·¥Ö·¥è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± üçí**

‚Ä¢ /broadcast (massage)
-  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥ÄÍú±·¥õ ·¥çÍú±…¢  ô è ·¥õ ú·¥á  ô·¥è·¥õ

‚Ä¢ /gcast (massage) 
-  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥ÄÍú±·¥õ ·¥çÍú±…¢ ·¥°…™·¥õ ú ·¥ò…™…¥

‚Ä¢ /restart 
-  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ  ô·¥è·¥õ Íú∞ Ä·¥è·¥ç Íú±·¥á Ä·¥†·¥á Ä

‚Ä¢ /exec
- ·¥áx·¥á·¥Ñ·¥ú·¥õ·¥á ·¥Ä…¥ è ·¥Ñ·¥ç·¥Ö

‚Ä¢ /stats
- …¢·¥á·¥õ  ô·¥è·¥õ Íú±·¥õ·¥Ä·¥õÍú±

‚Ä¢ /ping 
- ·¥ò…™…¥…¢…™…¥…¢ ·¥ú·¥ò·¥õ…™·¥ç·¥á

‚Ä¢ /update
- ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á  ô·¥è·¥õ ·¥°…™·¥õ ú  ü·¥Ä·¥õ·¥áÍú±·¥õ ·¥†·¥á ÄÍú±…™·¥è…¥

‚Ä¢ /gban ·¥è Ä /ungban
- …¢ ü·¥è ô·¥Ä ü  ô·¥Ä…¥ Íú± èÍú±·¥õ·¥á·¥ç

‚Ä¢ /leaveall 
-  ü·¥á·¥Ä·¥†…™…¥…¢ ·¥ÄÍú±Íú±…™Íú±·¥õ·¥Ä…¥·¥õ Íú∞ Ä·¥è·¥ç ·¥Ä ü ü ·¥Ñ ú·¥Ä·¥õÍú±

P·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è **@{UPDATE}** !""",
        reply_markup=InlineKeyboardMarkup(
            [
              
              [InlineKeyboardButton("üçé  ô·¥Ä·¥Ñ·¥ã  ú·¥è·¥ç·¥á üçé", callback_data="cbcmnds")]]
        ),
    )

@Client.on_callback_query(filters.regex("cbabout"))
async def cbabout(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**·¥Ä ô·¥è·¥ú·¥õ {BOT_NAME}  ô·¥è·¥õ üçí**

**[{BOT_NAME}](https://t.me/{BOT_USERNAME})** …™Íú± ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ö·¥áÍú±…™…¢…¥·¥á·¥Ö  ô è **@{UPDATE}** Íú∞·¥è Ä ·¥ò ü·¥Ä è…™…¥…¢  ú…™…¢ ú Q·¥ú·¥Ä ü…™·¥õ è ·¥Ä…¥·¥Ö ·¥ú…¥ ô Ä·¥á·¥Ä·¥ã·¥Ä ô ü·¥á ·¥ç·¥úÍú±…™·¥Ñ …™…¥ ·¥ú Ä …¢ Ä·¥è·¥ú·¥òÍú± ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ.

·¥õ ú…™Íú±  ô·¥è·¥õ  ú·¥á ü·¥òÍú±  è·¥è·¥ú ·¥õ·¥è ·¥ò ü·¥Ä è ·¥ç·¥úÍú±…™·¥Ñ, ·¥õ·¥è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥ç·¥úÍú±…™·¥Ñ Íú∞ Ä·¥è·¥ç  è·¥è·¥ú·¥õ·¥ú ô·¥á ·¥Ä…¥·¥Ö ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥ç·¥úÍú±…™·¥Ñ Íú∞ Ä·¥è·¥ç  è·¥è·¥ú·¥õ·¥ú ô·¥á Íú±·¥á Ä·¥†·¥á Ä ·¥Ä…¥·¥Ö ·¥ç·¥Ä…¥ è ·¥ç·¥è Ä·¥á Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥áÍú±  Ä·¥á ü·¥Ä·¥õ·¥á·¥Ö ·¥õ·¥è ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥†·¥è…™·¥Ñ·¥á·¥á ·¥Ñ ú·¥Ä·¥õ Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥á.

**·¥ÄÍú±Íú±…™Íú±·¥õ·¥Ä…¥·¥õ :- @{ASSUSERNAME}**""",
        reply_markup=InlineKeyboardMarkup(
            [
              [
                    InlineKeyboardButton("üçí Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=f"https://t.me/{SUPPORT}"),
                    InlineKeyboardButton("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± üçí", url=f"https://t.me/{UPDATE}")
                ],
            [InlineKeyboardButton("üçë Íú±·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á", callback_data="cbtuto")],
            [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã  ú·¥è·¥ç·¥á üçë", callback_data="cbhome")]]
        ),
    )


@Client.on_callback_query(filters.regex("cbstgs"))
async def cbstgs(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**·¥Ä ô·¥è·¥ú·¥õ ·¥ç·¥°…¥·¥ú  ô·¥ú·¥õ·¥õ·¥è…¥Íú± üçí**

·¥ÄÍú∞·¥õ·¥á Ä  è·¥è·¥ú ·¥ò ü·¥Ä è·¥á·¥Ö  è·¥è·¥ú Ä Íú±·¥è…¥…¢ Íú±·¥è·¥ç·¥á ·¥ç·¥á…¥·¥ú  ô·¥ú·¥õ·¥õ·¥è…¥Íú± ·¥°…™ ü ü ·¥Ñ·¥è·¥ç·¥áÍú± ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä ·¥ç·¥úÍú±…™·¥Ñ ·¥ò ü·¥Ä è…™…¥…¢ ·¥è…¥ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ. ·¥õ ú·¥á è ·¥Ä Ä·¥á ·¥ÄÍú± Íú∞·¥è ü ü·¥è·¥°Íú± :

‚Ä¢ ‚ñ∑ 
-  Ä·¥áÍú±·¥ú·¥ç·¥á ·¥ç·¥úÍú±…™·¥Ñ
‚Ä¢ II 
- ·¥ò·¥Ä·¥úÍú±·¥á ·¥ç·¥úÍú±…™·¥Ñ
‚Ä¢ ‚ñ¢  
- ·¥á…¥·¥Ö ·¥ç·¥úÍú±…™·¥Ñ
‚Ä¢ ‚Ä£‚Ä£ 
- Íú±·¥ã…™·¥ò ·¥ç·¥úÍú±…™·¥Ñ

 è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä üÍú±·¥è ·¥õ ú…™Íú± ·¥ç·¥á…¥·¥ú ·¥õ ú Ä·¥è·¥ú…¢ ú /menu ·¥Ä…¥·¥Ö /settings ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.

**·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö**""",
        reply_markup=InlineKeyboardMarkup(
            [
            [InlineKeyboardButton("üçí  ô·¥Ä·¥Ñ·¥ã  ú·¥è·¥ç·¥á üçí", callback_data="cbcmnds")]]
        ),
    )


@Client.on_callback_query(filters.regex("cbguide"))
async def cbguide(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""** Ä·¥á·¥Ä·¥Ö  ô·¥ÄÍú±…™·¥Ñ …¢·¥ú…™·¥Ö·¥á ·¥Ñ·¥Ä Ä·¥áÍú∞·¥ú ü ü è**

‚Ä¢ Íú∞…™ ÄÍú±·¥õ ·¥Ä·¥Ö·¥Ö ·¥õ ú…™Íú±  ô·¥è·¥õ …™…¥ ·¥ú Ä …¢ Ä·¥ò

‚Ä¢ ·¥ç·¥Ä·¥ã·¥á ·¥Ä  ô·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥

‚Ä¢ …¢…™·¥†·¥á·¥á …¥·¥á·¥á·¥Ö·¥á·¥Ö ·¥Ä·¥Ö·¥ç…™…¥ ·¥ò·¥á Ä·¥ç…™Íú±Íú±…™·¥è…¥

‚Ä¢ ·¥õ è·¥ò·¥á /reload …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò

‚Ä¢ Íú±·¥õ·¥Ä Ä·¥õ  è·¥è·¥ú Ä Ä …¢ Ä·¥è·¥ú·¥òÍú± ·¥†·¥è…™·¥Ñ·¥á·¥á ·¥Ñ ú·¥Ä·¥õ

‚Ä¢ …¥·¥è·¥° ·¥ò ü·¥Ä è…™…¥…¢ ·¥ú Ä Ä Íú±·¥è…¥…¢ ·¥Ä…¥·¥Ö·¥Ö ·¥á…¥·¥ä·¥è è !""",
        reply_markup=InlineKeyboardMarkup(
            [[
              InlineKeyboardButton("·¥Ñ·¥è·¥ç·¥ç·¥ú…¥ ·¥á Ä Ä·¥è Ä", callback_data="cberror")],
              [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã  ú·¥è·¥ç·¥á", callback_data="cbhome")]]
        ),
    )


@Client.on_callback_query(filters.regex("cberror"))
async def cberror(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**·¥ç·¥èÍú±·¥õ ü è Íú∞·¥Ä·¥Ñ·¥á·¥Ö ·¥á Ä Ä·¥è ÄÍú± üçí**

·¥ç·¥èÍú±·¥õ ü è, ·¥õ ú·¥á Ä·¥á ·¥°…™ ü ü  ô·¥á·¥á ·¥õ ú·¥á ·¥ç·¥Ä…™…¥ ·¥á Ä Ä·¥è Ä ·¥Ä ô·¥è·¥ú·¥õ ·¥õ·¥è ·¥ç·¥úÍú±…™·¥Ñ ·¥ÄÍú±Íú±…™Íú±·¥õ·¥Ä…¥·¥õ. …™Íú∞  è·¥è·¥ú ·¥Ä Ä·¥á Íú∞·¥Ä·¥Ñ…™…¥…¢ ·¥Ä…¥ è ·¥õ è·¥ò·¥á ·¥èÍú∞ ·¥á Ä Ä·¥è Ä …™…¥ ·¥ú Ä …¢ Ä·¥ò ·¥õ ú·¥á…¥ ·¥õ ú·¥Ä·¥õ ·¥õ…™·¥ç·¥á Íú∞…™ ÄÍú±·¥õ ·¥õ…™·¥ç·¥á·¥á ·¥ç·¥Ä·¥ã·¥á·¥á Íú±·¥ú Ä·¥á @{ASSUSERNAME} …™Íú± ·¥Ä·¥°·¥Ä…™ ü·¥Ä ô ü·¥á …™…¥ ·¥ú Ä Ä …¢ Ä·¥ò. …™Íú∞ …¥·¥è·¥õ ·¥õ ú·¥á…¥ ·¥Ä·¥Ö·¥Ö …™·¥õ ·¥Ä…¥·¥Ö  ô·¥áÍú∞·¥è Ä·¥á ·¥õ ú·¥Ä·¥õ ·¥ç·¥Ä·¥ã·¥á Íú±·¥ú Ä·¥á·¥á ·¥Ä üÍú±·¥è …™·¥õ …™Íú±Íú± …¥·¥è·¥õ  ô·¥Ä…¥…¥·¥á·¥Ö·¥Ö …™…¥ ·¥ú Ä ·¥Ñ ú·¥Ä·¥õ.\n\n**AÍú±Íú±…™Íú±·¥õ·¥Ä…¥·¥õ :- @{ASSUSERNAME}**\n\n**·¥õ ú·¥Ä…¥·¥ãÍú± !**""",
        reply_markup=InlineKeyboardMarkup(
            [
            [
                    InlineKeyboardButton("·¥ÄÍú±Íú±…™Íú±·¥õ·¥Ä…¥·¥õ", url=f"https://t.me/{ASSUSERNAME}")
                ],
              [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã  ú·¥è·¥ç·¥á", callback_data="cbguide")]]
        ),
    )


@Client.on_callback_query(filters.regex("cbtuto"))
async def cbtuto(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""** ú·¥á Ä·¥á …™Íú± ·¥õ ú·¥á Íú±·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á ·¥èÍú∞ ·¥õ ú·¥á  ü·¥ú·¥Ñ·¥ã è ·¥ç·¥úÍú±…™·¥Ñ  ô·¥è·¥õ**

…¢·¥ú·¥Ö …¥·¥á·¥°Íú± ! …¥·¥è·¥°  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä ü ü·¥è·¥° ·¥õ·¥è  è·¥è·¥ú Ä ·¥è·¥°…¥ ·¥ç·¥úÍú±…™·¥Ñ  ô·¥è·¥õ  ü…™·¥ã·¥á ·¥õ·¥è ·¥õ ú…™Íú± ·¥è…¥·¥á.  è·¥è·¥ú ·¥°…™ ü ü  ô·¥á …¢·¥á·¥õ  Ä·¥á·¥ò·¥è  ü…™…¥·¥ã  ô·¥á ü·¥è·¥° ·¥ä·¥úÍú±·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ …™·¥õ ·¥Ä…¥·¥Ö Íú∞·¥è ü ü·¥è·¥° Íú±·¥õ·¥á·¥òÍú±!

…™Íú∞ ·¥ú ú ú ·¥Ö…™·¥Ö'·¥õ ·¥ã…¥·¥è·¥°  ú·¥è·¥°·¥° ·¥õ·¥è ·¥ç·¥Ä·¥ã·¥á  è·¥è·¥ú Ä ·¥è·¥°…¥  ô·¥è·¥õ ·¥õ ú·¥á…¥ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥úÍú± ·¥Ä·¥õ @TeraYaarHooMai ·¥Ä…¥·¥Ö …¢·¥á·¥õ  ú·¥á ü·¥ò Íú∞ Ä·¥è·¥ç ·¥úÍú±.

**üçí  Ä·¥á·¥ò·¥è  ü…™…¥·¥ã : https://github.com/mrluckyxd/fortest**

**·¥õ ú·¥Ä…¥·¥ãÍú± !""",
       reply_markup=InlineKeyboardMarkup(
            [[
                    InlineKeyboardButton("üçë …¢·¥á·¥õ  Ä·¥á·¥ò·¥è üçë", url=f"https://github.com/PavanMagar/CodexunMusicBot")
                ],
              [InlineKeyboardButton("üçí  ô·¥Ä·¥Ñ·¥ã  ú·¥è·¥ç·¥á üçí", callback_data="cbabout")]]
        ),
    )

@Client.on_callback_query(filters.regex("cbhome"))
async def cbhome(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**Welcome [{query.message.chat.first_name}](tg://user?id={query.message.chat.id})** üëã

This is the **[{BOT_NAME}](https://t.me/{BOT_USERNAME}) bot,** a bot for playing high quality and unbreakable music in your groups voice chat.

Just add me to your group & make as a admin with needed admin permissions to perform a right actions, now let's enjoy your music!

Use the given buttons for more üìç""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "Commands", callback_data="cbcmnds"),
                    InlineKeyboardButton(
                        "About", callback_data="cbabout")
                ],
                [
                    InlineKeyboardButton(
                        "Basic Guide", callback_data="cbguide")
                ],
                [
                    InlineKeyboardButton(
                        "‚úö Add Bot in Your Group ‚úö", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
                ]
                
           ]
        ),
    )

@Client.on_callback_query(filters.regex(pattern=r"^(cls)$"))
async def closed(_, query: CallbackQuery):
    from_user = query.from_user
    permissions = await member_permissions(query.message.chat.id, from_user.id)
    permission = "can_restrict_members"
    if permission not in permissions:
        return await query.answer(
            "You don't have enough permissions to perform this action.",
            show_alert=True,
        )
    await query.message.delete()

@Client.on_callback_query(filters.regex("cbmenu"))
async def cbmenu(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer("you're an Anonymous Admin !\n\n¬ª revert back to user account from admin rights.")
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("Only admins cam use this..!", show_alert=True)
    chat_id = query.message.chat.id
    if is_music_playing(chat_id):
          await query.edit_message_text(
              f"**üçí {BOT_NAME}  ô·¥è·¥õ Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±**\n\nüçé …¢ Ä·¥è·¥ú·¥ò : {query.message.chat.title}.\nüçπ …¢ Ä·¥ò …™·¥Ö : {query.message.chat.id}\n\n**·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥òÍú± ·¥ç·¥úÍú±…™·¥Ñ Íú± èÍú±·¥õ·¥á·¥ç  ô è ·¥ò Ä·¥áÍú±Íú±…™…¥…¢  ô·¥ú·¥õ·¥õ·¥è…¥Íú± …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥° üçí**",

              reply_markup=menu_keyboard
         )
    else:
        await query.answer("…¥·¥è·¥õ ú…™…¥…¢ …™Íú± ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è Íú±·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢", show_alert=True)



@Client.on_callback_query(filters.regex("high"))
async def high(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Only admin with manage voice chat permission can do this.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Now streaming in high quality!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥á ·¥Ä·¥ú·¥Ö…™·¥è Q·¥ú·¥Ä ü…™·¥õ è üîä**\n\n·¥Ñ ú·¥è·¥èÍú±·¥á  è·¥è·¥ú Ä ·¥è·¥ò·¥õ…™·¥è…¥ Íú∞ Ä·¥è·¥ç …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥Ä·¥ú·¥Ö…™·¥è Q·¥ú·¥Ä ü…™·¥õ è.",
        reply_markup=highquality_keyboard
    )
    else:
        await CallbackQuery.answer(f"…¥·¥è·¥õ ú…™…¥…¢ …™Íú± ·¥ò ü·¥Ä è…™…¥…¢  ô·¥Ä ô è.", show_alert=True)


@Client.on_callback_query(filters.regex("low"))
async def low(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Only admin with manage voice chat permission can do this.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Now streaming in low quality!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥Ä·¥ú·¥Ö…™·¥è Q·¥ú·¥Ä ü…™·¥õ è üîä**\n\n·¥Ñ ú·¥è·¥èÍú±·¥á·¥á  è·¥è·¥ú Ä ·¥è·¥ò·¥õ…™·¥è…¥ Íú∞ Ä·¥è·¥ç …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥Ä·¥ú·¥Ö…™·¥è Q·¥ú·¥Ä ü…™·¥õ è.",
        reply_markup=lowquality_keyboard
    )
    else:
        await CallbackQuery.answer(f"…¥·¥è·¥õ ú…™…¥…¢ …™Íú±Íú± ·¥ò ü·¥Ä è…™…¥…¢  ô·¥Ä ô è.", show_alert=True)

@Client.on_callback_query(filters.regex("medium"))
async def medium(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Only admin with manage voice chat permission can do this.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Now streaming in medium quality!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥á ·¥Ä·¥ú·¥Ö…™·¥è Q·¥ú·¥Ä ü…™·¥õ èüîä**\n\n·¥Ñ ú·¥è·¥èÍú±·¥á·¥á  è·¥è·¥ú Ä ·¥è·¥ò·¥õ…™·¥è…¥…¥ Íú∞ Ä·¥è·¥ç …¢…™·¥†·¥á  ô·¥á ü·¥è·¥° ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥Ä·¥ú·¥Ö…™·¥è Q·¥ú·¥Ä ü…™·¥õ è .",
        reply_markup=mediumquality_keyboard
    )
    else:
        await CallbackQuery.answer(f"…¥·¥è·¥õ ú…™…¥…¢ …™Íú± ·¥ò ü·¥Ä è…™…¥…¢  ô·¥Ä ô è.", show_alert=True)

@Client.on_callback_query(filters.regex("fifth"))
async def fifth(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Only admin with manage voice chat permission can do this.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Now streaming in 200% volume!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**Manage Audio Volume üîä**\n\nIf you want to manage volume through buttons then make a assistant Admin first.",
        reply_markup=fifth_keyboard
    )
    else:
        await CallbackQuery.answer(f"Nothing is playing on voice chat.", show_alert=True)

@Client.on_callback_query(filters.regex("fourth"))
async def fourth(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Only admin with manage voice chat permission can do this.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Now streaming 150 volume!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**Manage Audio Volume üîä**\n\nIf you want to manage volume through buttons then make a assistant Admin first.",
        reply_markup=fourth_keyboard
    )
    else:
        await CallbackQuery.answer(f"Nothing is playing on voice chat.", show_alert=True)

@Client.on_callback_query(filters.regex("third"))
async def third(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Only admin with manage voice chat permission can do this.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Now streaming in 100% volume!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**Manage Audio Volume üîä**\n\nIf you want to manage volume through buttons then make a assistant Admin first.",
        reply_markup=third_keyboard
    )
    else:
        await CallbackQuery.answer(f"Nothing is playing on voice chat.", show_alert=True)


@Client.on_callback_query(filters.regex("second"))
async def second(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Only admin with manage voice chat permission can do this.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Now streaming in 50% volume!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**Manage Audio Volume üîä**\n\nIf you want to manage volume through buttons then make a assistant Admin first.",
        reply_markup=second_keyboard
    )
    else:
        await CallbackQuery.answer(f"Nothing is playing on voice chat.", show_alert=True)


@Client.on_callback_query(filters.regex("first"))
async def first(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Only admin with manage voice chat permission can do this.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Now streaming in 20% volume!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**Manage Audio Volume üîä**\n\nIf you want to manage volume through buttons then make a assistant Admin first.",
        reply_markup=first_keyboard
    )
    else:
        await CallbackQuery.answer(f"Nothing is playing on voice chat.", show_alert=True)

@Client.on_callback_query(filters.regex("nonabout"))
async def nonabout(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**Here is the some basic information about to {BOT_NAME},From here you can simply contact us and can join us!**""",
        reply_markup=InlineKeyboardMarkup(
            [
              [
                    InlineKeyboardButton("üçí Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=f"https://t.me/{SUPPORT}"),
                    InlineKeyboardButton("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± üçí", url=f"https://t.me/{UPDATE}")
                ],
              [InlineKeyboardButton("üçë  ô·¥Ä·¥Ñ·¥ã ·¥ç·¥á…¥·¥ú üçë", callback_data="cbmenu")]]
        ),
    )


@Client.on_callback_query(filters.regex("dbconfirm"))
async def dbconfirm(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer("you're an Anonymous Admin !\n\n¬ª revert back to user account from admin rights.")
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("Only admins cam use this..!", show_alert=True)
    chat_id = query.message.chat.id
    if is_music_playing(chat_id):
          await query.edit_message_text(
              f"**Confirmation ‚ö†Ô∏è**\n\nAre you sure want to end stream in {query.message.chat.title} and clean all Queued songs in db ?**",

              reply_markup=dbclean_keyboard
         )
    else:
        await query.answer("nothing is currently streaming", show_alert=True)

